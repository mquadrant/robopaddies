{"version":3,"sources":["components/Card.tsx","components/CardList.tsx","components/SearchBar.tsx","components/Scroll.tsx","components/ErrorBoundry.tsx","containers/MainPage.tsx","App.tsx","redux/action.tsx","redux/types.tsx","serviceWorker.js","redux/reducers.tsx","index.tsx"],"names":["Card","name","email","className","src","alt","CardList","props","robots","map","robot","index","key","id","SearchBar","searchChange","type","placeholder","onChange","Scroll","children","style","overflowY","height","ErrorBoundry","state","hasError","_error","_info","this","setState","textAlign","Component","MainPage","requestForRobots","useState","filteredRobots","setFilteredRobots","useEffect","filterRobots","term","re","RegExp","filter","test","e","target","value","length","connect","requestRobots","isPending","dispatch","fetch","then","res","json","data","payload","catch","error","errorRequestRobots","Boolean","window","location","hostname","match","initialState","searchField","initialStateRobots","logger","createLogger","rootReducers","combineReducers","action","searchRobots","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.47e035ea.chunk.js","sourcesContent":["import React from 'react'\n\ninterface ICard {\n    name: string;\n    email: string;\n    key?:number;\n    id?:number\n}\n\nexport default function Card({name,email}:ICard) {\n    return (\n        <div className=\"card flex-none inline-block bg-green-200 shadow-md p-3 m-2 rounded-lg\">\n            <img src={`https://robohash.org/${name}?size=200x200`} alt={name}/>\n            <div className=\"my-2\">\n                <h4 className=\"font-semibold text-base text-sm text-center\">{name}</h4>\n                <p className=\"text-center text-xs\">{email}</p>\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\nimport Card from './Card'\n\nexport default function CardList(props:any) {\n    const {robots} = props;\n    return (\n        <div className=\"mt-8 container mx-auto flex flex-wrap justify-center\">\n            {robots?robots.map((robot:any,index:any)=>{\n                return (<Card key={index} id= {robot.id} name={robot.name} email={robot.email}/>)\n            }):null}\n      </div>\n    )\n}\n","import React from 'react'\n\ninterface ISearchBoxProps {\n    searchChange(event:React.SyntheticEvent<HTMLInputElement>):void\n}\n\nexport default function SearchBar(props:ISearchBoxProps) {\n    const {searchChange}:ISearchBoxProps=props;\n    return (\n        <div>\n            <input className=\"shadow appearance-none border rounded w-36 py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" type='text' name='search' placeholder='Search Robots' onChange={searchChange}/>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function Scroll(props:any){\n    const {children} = props;\n    return (\n        <div style={{overflowY:'scroll',height:'620px'}}>\n        {children}\n        </div>\n    )\n}","import React,{Component} from 'react';\n\nexport default class ErrorBoundry extends Component{\n    state:any;\nconstructor(props:any){\n    super(props);\n    this.state = {\n        hasError: false\n    }\n}\ncomponentDidCatch(_error:any,_info:any){\nthis.setState({hasError:true})\n}\n\nrender(){\n    return (\n        <>\n        {this.state.hasError?(<h1 style={{textAlign:\"center\"}}>Oooops. That is not good</h1>):\n            (this.props.children )}\n    </>);\n}\n    \n}","import React ,{useState,useEffect}from 'react';\nimport CardList from '../components/CardList'\nimport SearchBar from '../components/SearchBar'\nimport Scroll from '../components/Scroll'\nimport ErrorBoundry from '../components/ErrorBoundry';\n\n\n\nexport default function MainPage(props:any) {\n  const {requestForRobots,robots} = props;\n  const [filteredRobots, setFilteredRobots] = useState([]);\n  \n  useEffect(()=>{ \n    requestForRobots();\n  },[requestForRobots])\n\n  useEffect(()=>{ \n    setFilteredRobots(robots);\n  },[robots])\n\n  const searchHandler = (e:React.ChangeEvent<HTMLInputElement>):void=>{ \n    filterRobots(e.target.value);\n  }\n\n  const filterRobots = (term:string)=>{\n    let re = new RegExp(term, \"gi\");\n    setFilteredRobots(robots.filter((robot:any)=>{\n      return re.test(robot.name) || re.test(robot.email)\n    }))\n  }\n  \n  return (\n          <div className=\"app-content\">\n            <div className=\"text-center my-12\">\n            <h1 className=\"text-5xl my-8\">ROBOPADDIES</h1>\n            <SearchBar searchChange={searchHandler}/>\n            </div>\n          <hr className=\"border-green-200\"/>\n          {filteredRobots.length?(\n          <Scroll>\n            <ErrorBoundry>\n              <CardList robots={filteredRobots}/>\n            </ErrorBoundry>\n          </Scroll>):null}\n        </div>\n  )\n    \n}\n","import React from 'react';\nimport fetch from 'node-fetch'\nimport {connect} from 'react-redux';\nimport MainPage from './containers/MainPage';\n\nimport {requestRobots} from './redux/action';\n\nconst mapStateToProps = (state:any) => {\n  return {\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending\n  }\n}\n\nconst mapDispatchToProps = (dispatch:any )=> {\n return {\n  requestForRobots: () => dispatch(requestRobots(fetch))\n}\n}\n\nfunction App(props:any) {\n  return (\n    <MainPage {...props}/>\n  )\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_PENDING, \n  REQUEST_ROBOTS_ERROR} from \"./types\";\n\nexport const setSearchField = (text:string) => {\n  return {\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n  };\n};\n\nexport const pendingRequestRobots = ()=>{\n  return {type:REQUEST_ROBOTS_PENDING}\n}\nexport const errorRequestRobots = (error:string)=>{\n  return {type:REQUEST_ROBOTS_ERROR,\n  payload:error}\n}\nexport const successRequestRobots = (users:Array<any>)=>{\n  return {type:REQUEST_ROBOTS_SUCCESS\n    ,payload:users}\n}\n\nexport const requestRobots = (fetch:Function) => (dispatch:any)=>{\n    dispatch(pendingRequestRobots());\n    return fetch('https://jsonplaceholder.typicode.com/users')\n    .then((res:any)=>res.json())\n    .then((data:any)=>{\n      dispatch(successRequestRobots(data))\n      return data\n    })\n    .catch((error:any)=> dispatch(errorRequestRobots(error)))\n}\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_ERROR = \"REQUEST_ROBOTS_ERROR\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_PENDING, \n    REQUEST_ROBOTS_ERROR} from './types'\n\n//Single source of truth\n//State is read only\n//Changes using pure functions\n\ninterface IAction{\n    type?:string;\n    payload?:any\n}\n\nconst initialState = {\n    searchField:\"\"\n}\n\nexport const searchRobots = (state=initialState,action:IAction ={})=>{\nswitch(action.type){\n    case CHANGE_SEARCH_FIELD:\n        return {\n            ...state,\n            searchField: action.payload\n        }\n    default:\n        return state\n}\n}\n\n\nconst initialStateRobots = {\n    isPending:false,\n    robots:[],\n    error:null\n}\n\nexport const requestRobots = (state=initialStateRobots,action:IAction={})=>{\nswitch(action.type){\n    case REQUEST_ROBOTS_SUCCESS:\n        return {\n            ...state,\n            robots: action.payload,\n            isPending: false\n        }\n    case REQUEST_ROBOTS_PENDING:\n        return {\n            ...state,\n            isPending: true\n        }\n    case REQUEST_ROBOTS_ERROR:\n        return {\n            ...state,\n            error: action.payload,\n            isPending: false\n        }\n    default:\n        return state\n}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore,applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport App from './App';\nimport './styles/tailwind.css';\nimport './index.css'\nimport * as serviceWorker from './serviceWorker';\nimport {searchRobots,requestRobots} from './redux/reducers';\n\nconst logger = createLogger();\n\nconst rootReducers = combineReducers({requestRobots, searchRobots})\n\nconst store = createStore(rootReducers,applyMiddleware(thunk,logger))\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root') as HTMLElement\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}